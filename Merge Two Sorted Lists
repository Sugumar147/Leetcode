/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode h1, ListNode h2) {
        ListNode nn=null;
        if(h1==null && h2==null) return h1;
        if(h1==null && h2!=null) return h2;
        if(h2==null && h1!=null) return h1;
        if(h1.next==null && h2.next==null) {
            if(h1.val <=h2.val) {
                nn=h1;
                nn.next=h2;
                return nn;
            }
            else {
                nn=h2;
                nn.next=h1;
                return nn;
            }
        }
        if(h1.val <=h2.val) {
            nn=h1;
            h1=h1.next;
        }
        else {
            nn=h2;
            h2=h2.next;
        }
             if(h1==null) {nn.next=h2; return nn;}
            if(h2==null) {nn.next=h1; return nn; }
        ListNode t=nn;
        while(h1!=null && h2!=null) {
            if(h1.val<=h2.val) {
                t.next=h1;
                t=h1;
                h1=h1.next;
            }
            else {
                t.next=h2;
                t=h2;
                h2=h2.next;
            }
            if(h1==null) t.next=h2;
            if(h2==null) t.next=h1;
        }
        return nn;
    }
}
